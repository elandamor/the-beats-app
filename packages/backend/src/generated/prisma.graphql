type AggregateAlbum {
  count: Int!
}

type AggregateArtist {
  count: Int!
}

type AggregateAudio {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregatePlaylist {
  count: Int!
}

type AggregatePlaylistTrack {
  count: Int!
}

type AggregateTrack {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Album {
  id: ID!
  alias: String!
  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]
  duration: Int
  genres: [String!]!
  artwork: Image
  name: String!
  numTracks: Int
  releaseDate: DateTime!
  releaseType: ReleaseType!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AlbumConnection {
  pageInfo: PageInfo!
  edges: [AlbumEdge]!
  aggregate: AggregateAlbum!
}

input AlbumCreategenresInput {
  set: [String!]
}

input AlbumCreateInput {
  id: ID
  alias: String!
  artists: ArtistCreateManyWithoutAlbumsInput
  duration: Int
  genres: AlbumCreategenresInput
  artwork: ImageCreateOneInput
  name: String!
  numTracks: Int
  releaseDate: DateTime!
  releaseType: ReleaseType!
  tracks: TrackCreateManyWithoutAlbumInput
}

input AlbumCreateManyWithoutArtistsInput {
  create: [AlbumCreateWithoutArtistsInput!]
  connect: [AlbumWhereUniqueInput!]
}

input AlbumCreateOneWithoutTracksInput {
  create: AlbumCreateWithoutTracksInput
  connect: AlbumWhereUniqueInput
}

input AlbumCreateWithoutArtistsInput {
  id: ID
  alias: String!
  duration: Int
  genres: AlbumCreategenresInput
  artwork: ImageCreateOneInput
  name: String!
  numTracks: Int
  releaseDate: DateTime!
  releaseType: ReleaseType!
  tracks: TrackCreateManyWithoutAlbumInput
}

input AlbumCreateWithoutTracksInput {
  id: ID
  alias: String!
  artists: ArtistCreateManyWithoutAlbumsInput
  duration: Int
  genres: AlbumCreategenresInput
  artwork: ImageCreateOneInput
  name: String!
  numTracks: Int
  releaseDate: DateTime!
  releaseType: ReleaseType!
}

type AlbumEdge {
  node: Album!
  cursor: String!
}

enum AlbumOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  duration_ASC
  duration_DESC
  name_ASC
  name_DESC
  numTracks_ASC
  numTracks_DESC
  releaseDate_ASC
  releaseDate_DESC
  releaseType_ASC
  releaseType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AlbumPreviousValues {
  id: ID!
  alias: String!
  duration: Int
  genres: [String!]!
  name: String!
  numTracks: Int
  releaseDate: DateTime!
  releaseType: ReleaseType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AlbumScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  numTracks: Int
  numTracks_not: Int
  numTracks_in: [Int!]
  numTracks_not_in: [Int!]
  numTracks_lt: Int
  numTracks_lte: Int
  numTracks_gt: Int
  numTracks_gte: Int
  releaseDate: DateTime
  releaseDate_not: DateTime
  releaseDate_in: [DateTime!]
  releaseDate_not_in: [DateTime!]
  releaseDate_lt: DateTime
  releaseDate_lte: DateTime
  releaseDate_gt: DateTime
  releaseDate_gte: DateTime
  releaseType: ReleaseType
  releaseType_not: ReleaseType
  releaseType_in: [ReleaseType!]
  releaseType_not_in: [ReleaseType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AlbumScalarWhereInput!]
  OR: [AlbumScalarWhereInput!]
  NOT: [AlbumScalarWhereInput!]
}

type AlbumSubscriptionPayload {
  mutation: MutationType!
  node: Album
  updatedFields: [String!]
  previousValues: AlbumPreviousValues
}

input AlbumSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AlbumWhereInput
  AND: [AlbumSubscriptionWhereInput!]
  OR: [AlbumSubscriptionWhereInput!]
  NOT: [AlbumSubscriptionWhereInput!]
}

input AlbumUpdategenresInput {
  set: [String!]
}

input AlbumUpdateInput {
  alias: String
  artists: ArtistUpdateManyWithoutAlbumsInput
  duration: Int
  genres: AlbumUpdategenresInput
  artwork: ImageUpdateOneInput
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
  tracks: TrackUpdateManyWithoutAlbumInput
}

input AlbumUpdateManyDataInput {
  alias: String
  duration: Int
  genres: AlbumUpdategenresInput
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
}

input AlbumUpdateManyMutationInput {
  alias: String
  duration: Int
  genres: AlbumUpdategenresInput
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
}

input AlbumUpdateManyWithoutArtistsInput {
  create: [AlbumCreateWithoutArtistsInput!]
  delete: [AlbumWhereUniqueInput!]
  connect: [AlbumWhereUniqueInput!]
  set: [AlbumWhereUniqueInput!]
  disconnect: [AlbumWhereUniqueInput!]
  update: [AlbumUpdateWithWhereUniqueWithoutArtistsInput!]
  upsert: [AlbumUpsertWithWhereUniqueWithoutArtistsInput!]
  deleteMany: [AlbumScalarWhereInput!]
  updateMany: [AlbumUpdateManyWithWhereNestedInput!]
}

input AlbumUpdateManyWithWhereNestedInput {
  where: AlbumScalarWhereInput!
  data: AlbumUpdateManyDataInput!
}

input AlbumUpdateOneRequiredWithoutTracksInput {
  create: AlbumCreateWithoutTracksInput
  update: AlbumUpdateWithoutTracksDataInput
  upsert: AlbumUpsertWithoutTracksInput
  connect: AlbumWhereUniqueInput
}

input AlbumUpdateWithoutArtistsDataInput {
  alias: String
  duration: Int
  genres: AlbumUpdategenresInput
  artwork: ImageUpdateOneInput
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
  tracks: TrackUpdateManyWithoutAlbumInput
}

input AlbumUpdateWithoutTracksDataInput {
  alias: String
  artists: ArtistUpdateManyWithoutAlbumsInput
  duration: Int
  genres: AlbumUpdategenresInput
  artwork: ImageUpdateOneInput
  name: String
  numTracks: Int
  releaseDate: DateTime
  releaseType: ReleaseType
}

input AlbumUpdateWithWhereUniqueWithoutArtistsInput {
  where: AlbumWhereUniqueInput!
  data: AlbumUpdateWithoutArtistsDataInput!
}

input AlbumUpsertWithoutTracksInput {
  update: AlbumUpdateWithoutTracksDataInput!
  create: AlbumCreateWithoutTracksInput!
}

input AlbumUpsertWithWhereUniqueWithoutArtistsInput {
  where: AlbumWhereUniqueInput!
  update: AlbumUpdateWithoutArtistsDataInput!
  create: AlbumCreateWithoutArtistsInput!
}

input AlbumWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  artists_every: ArtistWhereInput
  artists_some: ArtistWhereInput
  artists_none: ArtistWhereInput
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  artwork: ImageWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  numTracks: Int
  numTracks_not: Int
  numTracks_in: [Int!]
  numTracks_not_in: [Int!]
  numTracks_lt: Int
  numTracks_lte: Int
  numTracks_gt: Int
  numTracks_gte: Int
  releaseDate: DateTime
  releaseDate_not: DateTime
  releaseDate_in: [DateTime!]
  releaseDate_not_in: [DateTime!]
  releaseDate_lt: DateTime
  releaseDate_lte: DateTime
  releaseDate_gt: DateTime
  releaseDate_gte: DateTime
  releaseType: ReleaseType
  releaseType_not: ReleaseType
  releaseType_in: [ReleaseType!]
  releaseType_not_in: [ReleaseType!]
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
}

input AlbumWhereUniqueInput {
  id: ID
  alias: String
}

type Artist {
  id: ID!
  albums(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album!]
  alias: String!
  avatar: Image
  featuresIn(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  genres: [String!]!
  name: String!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ArtistConnection {
  pageInfo: PageInfo!
  edges: [ArtistEdge]!
  aggregate: AggregateArtist!
}

input ArtistCreategenresInput {
  set: [String!]
}

input ArtistCreateInput {
  id: ID
  albums: AlbumCreateManyWithoutArtistsInput
  alias: String!
  avatar: ImageCreateOneInput
  featuresIn: TrackCreateManyWithoutFeaturingInput
  genres: ArtistCreategenresInput
  name: String!
  tracks: TrackCreateManyWithoutArtistsInput
}

input ArtistCreateManyWithoutAlbumsInput {
  create: [ArtistCreateWithoutAlbumsInput!]
  connect: [ArtistWhereUniqueInput!]
}

input ArtistCreateManyWithoutFeaturesInInput {
  create: [ArtistCreateWithoutFeaturesInInput!]
  connect: [ArtistWhereUniqueInput!]
}

input ArtistCreateManyWithoutTracksInput {
  create: [ArtistCreateWithoutTracksInput!]
  connect: [ArtistWhereUniqueInput!]
}

input ArtistCreateWithoutAlbumsInput {
  id: ID
  alias: String!
  avatar: ImageCreateOneInput
  featuresIn: TrackCreateManyWithoutFeaturingInput
  genres: ArtistCreategenresInput
  name: String!
  tracks: TrackCreateManyWithoutArtistsInput
}

input ArtistCreateWithoutFeaturesInInput {
  id: ID
  albums: AlbumCreateManyWithoutArtistsInput
  alias: String!
  avatar: ImageCreateOneInput
  genres: ArtistCreategenresInput
  name: String!
  tracks: TrackCreateManyWithoutArtistsInput
}

input ArtistCreateWithoutTracksInput {
  id: ID
  albums: AlbumCreateManyWithoutArtistsInput
  alias: String!
  avatar: ImageCreateOneInput
  featuresIn: TrackCreateManyWithoutFeaturingInput
  genres: ArtistCreategenresInput
  name: String!
}

type ArtistEdge {
  node: Artist!
  cursor: String!
}

enum ArtistOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ArtistPreviousValues {
  id: ID!
  alias: String!
  genres: [String!]!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ArtistScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ArtistScalarWhereInput!]
  OR: [ArtistScalarWhereInput!]
  NOT: [ArtistScalarWhereInput!]
}

type ArtistSubscriptionPayload {
  mutation: MutationType!
  node: Artist
  updatedFields: [String!]
  previousValues: ArtistPreviousValues
}

input ArtistSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ArtistWhereInput
  AND: [ArtistSubscriptionWhereInput!]
  OR: [ArtistSubscriptionWhereInput!]
  NOT: [ArtistSubscriptionWhereInput!]
}

input ArtistUpdategenresInput {
  set: [String!]
}

input ArtistUpdateInput {
  albums: AlbumUpdateManyWithoutArtistsInput
  alias: String
  avatar: ImageUpdateOneInput
  featuresIn: TrackUpdateManyWithoutFeaturingInput
  genres: ArtistUpdategenresInput
  name: String
  tracks: TrackUpdateManyWithoutArtistsInput
}

input ArtistUpdateManyDataInput {
  alias: String
  genres: ArtistUpdategenresInput
  name: String
}

input ArtistUpdateManyMutationInput {
  alias: String
  genres: ArtistUpdategenresInput
  name: String
}

input ArtistUpdateManyWithoutAlbumsInput {
  create: [ArtistCreateWithoutAlbumsInput!]
  delete: [ArtistWhereUniqueInput!]
  connect: [ArtistWhereUniqueInput!]
  set: [ArtistWhereUniqueInput!]
  disconnect: [ArtistWhereUniqueInput!]
  update: [ArtistUpdateWithWhereUniqueWithoutAlbumsInput!]
  upsert: [ArtistUpsertWithWhereUniqueWithoutAlbumsInput!]
  deleteMany: [ArtistScalarWhereInput!]
  updateMany: [ArtistUpdateManyWithWhereNestedInput!]
}

input ArtistUpdateManyWithoutFeaturesInInput {
  create: [ArtistCreateWithoutFeaturesInInput!]
  delete: [ArtistWhereUniqueInput!]
  connect: [ArtistWhereUniqueInput!]
  set: [ArtistWhereUniqueInput!]
  disconnect: [ArtistWhereUniqueInput!]
  update: [ArtistUpdateWithWhereUniqueWithoutFeaturesInInput!]
  upsert: [ArtistUpsertWithWhereUniqueWithoutFeaturesInInput!]
  deleteMany: [ArtistScalarWhereInput!]
  updateMany: [ArtistUpdateManyWithWhereNestedInput!]
}

input ArtistUpdateManyWithoutTracksInput {
  create: [ArtistCreateWithoutTracksInput!]
  delete: [ArtistWhereUniqueInput!]
  connect: [ArtistWhereUniqueInput!]
  set: [ArtistWhereUniqueInput!]
  disconnect: [ArtistWhereUniqueInput!]
  update: [ArtistUpdateWithWhereUniqueWithoutTracksInput!]
  upsert: [ArtistUpsertWithWhereUniqueWithoutTracksInput!]
  deleteMany: [ArtistScalarWhereInput!]
  updateMany: [ArtistUpdateManyWithWhereNestedInput!]
}

input ArtistUpdateManyWithWhereNestedInput {
  where: ArtistScalarWhereInput!
  data: ArtistUpdateManyDataInput!
}

input ArtistUpdateWithoutAlbumsDataInput {
  alias: String
  avatar: ImageUpdateOneInput
  featuresIn: TrackUpdateManyWithoutFeaturingInput
  genres: ArtistUpdategenresInput
  name: String
  tracks: TrackUpdateManyWithoutArtistsInput
}

input ArtistUpdateWithoutFeaturesInDataInput {
  albums: AlbumUpdateManyWithoutArtistsInput
  alias: String
  avatar: ImageUpdateOneInput
  genres: ArtistUpdategenresInput
  name: String
  tracks: TrackUpdateManyWithoutArtistsInput
}

input ArtistUpdateWithoutTracksDataInput {
  albums: AlbumUpdateManyWithoutArtistsInput
  alias: String
  avatar: ImageUpdateOneInput
  featuresIn: TrackUpdateManyWithoutFeaturingInput
  genres: ArtistUpdategenresInput
  name: String
}

input ArtistUpdateWithWhereUniqueWithoutAlbumsInput {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateWithoutAlbumsDataInput!
}

input ArtistUpdateWithWhereUniqueWithoutFeaturesInInput {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateWithoutFeaturesInDataInput!
}

input ArtistUpdateWithWhereUniqueWithoutTracksInput {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateWithoutTracksDataInput!
}

input ArtistUpsertWithWhereUniqueWithoutAlbumsInput {
  where: ArtistWhereUniqueInput!
  update: ArtistUpdateWithoutAlbumsDataInput!
  create: ArtistCreateWithoutAlbumsInput!
}

input ArtistUpsertWithWhereUniqueWithoutFeaturesInInput {
  where: ArtistWhereUniqueInput!
  update: ArtistUpdateWithoutFeaturesInDataInput!
  create: ArtistCreateWithoutFeaturesInInput!
}

input ArtistUpsertWithWhereUniqueWithoutTracksInput {
  where: ArtistWhereUniqueInput!
  update: ArtistUpdateWithoutTracksDataInput!
  create: ArtistCreateWithoutTracksInput!
}

input ArtistWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  albums_every: AlbumWhereInput
  albums_some: AlbumWhereInput
  albums_none: AlbumWhereInput
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  avatar: ImageWhereInput
  featuresIn_every: TrackWhereInput
  featuresIn_some: TrackWhereInput
  featuresIn_none: TrackWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
}

input ArtistWhereUniqueInput {
  id: ID
  alias: String
}

type Audio {
  id: ID!
  bitrate: Int
  format: String!
  size: Int
  uploadedBy: User!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AudioConnection {
  pageInfo: PageInfo!
  edges: [AudioEdge]!
  aggregate: AggregateAudio!
}

input AudioCreateInput {
  id: ID
  bitrate: Int
  format: String!
  size: Int
  uploadedBy: UserCreateOneInput!
  url: String!
}

input AudioCreateOneInput {
  create: AudioCreateInput
  connect: AudioWhereUniqueInput
}

type AudioEdge {
  node: Audio!
  cursor: String!
}

enum AudioOrderByInput {
  id_ASC
  id_DESC
  bitrate_ASC
  bitrate_DESC
  format_ASC
  format_DESC
  size_ASC
  size_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AudioPreviousValues {
  id: ID!
  bitrate: Int
  format: String!
  size: Int
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AudioSubscriptionPayload {
  mutation: MutationType!
  node: Audio
  updatedFields: [String!]
  previousValues: AudioPreviousValues
}

input AudioSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AudioWhereInput
  AND: [AudioSubscriptionWhereInput!]
  OR: [AudioSubscriptionWhereInput!]
  NOT: [AudioSubscriptionWhereInput!]
}

input AudioUpdateDataInput {
  bitrate: Int
  format: String
  size: Int
  uploadedBy: UserUpdateOneRequiredInput
  url: String
}

input AudioUpdateInput {
  bitrate: Int
  format: String
  size: Int
  uploadedBy: UserUpdateOneRequiredInput
  url: String
}

input AudioUpdateManyMutationInput {
  bitrate: Int
  format: String
  size: Int
  url: String
}

input AudioUpdateOneInput {
  create: AudioCreateInput
  update: AudioUpdateDataInput
  upsert: AudioUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AudioWhereUniqueInput
}

input AudioUpsertNestedInput {
  update: AudioUpdateDataInput!
  create: AudioCreateInput!
}

input AudioWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  bitrate: Int
  bitrate_not: Int
  bitrate_in: [Int!]
  bitrate_not_in: [Int!]
  bitrate_lt: Int
  bitrate_lte: Int
  bitrate_gt: Int
  bitrate_gte: Int
  format: String
  format_not: String
  format_in: [String!]
  format_not_in: [String!]
  format_lt: String
  format_lte: String
  format_gt: String
  format_gte: String
  format_contains: String
  format_not_contains: String
  format_starts_with: String
  format_not_starts_with: String
  format_ends_with: String
  format_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  uploadedBy: UserWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AudioWhereInput!]
  OR: [AudioWhereInput!]
  NOT: [AudioWhereInput!]
}

input AudioWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Image {
  id: ID!
  uploadedBy: User!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  uploadedBy: UserCreateOneInput!
  url: String!
}

input ImageCreateManyInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageCreateOneInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type ImageEdge {
  node: Image!
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImagePreviousValues {
  id: ID!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
  AND: [ImageSubscriptionWhereInput!]
  OR: [ImageSubscriptionWhereInput!]
  NOT: [ImageSubscriptionWhereInput!]
}

input ImageUpdateDataInput {
  uploadedBy: UserUpdateOneRequiredInput
  url: String
}

input ImageUpdateInput {
  uploadedBy: UserUpdateOneRequiredInput
  url: String
}

input ImageUpdateManyDataInput {
  url: String
}

input ImageUpdateManyInput {
  create: [ImageCreateInput!]
  update: [ImageUpdateWithWhereUniqueNestedInput!]
  upsert: [ImageUpsertWithWhereUniqueNestedInput!]
  delete: [ImageWhereUniqueInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
}

input ImageUpdateManyMutationInput {
  url: String
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateOneInput {
  create: ImageCreateInput
  update: ImageUpdateDataInput
  upsert: ImageUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ImageWhereUniqueInput
}

input ImageUpdateWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateDataInput!
}

input ImageUpsertNestedInput {
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageUpsertWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uploadedBy: UserWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
}

input ImageWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAlbum(data: AlbumCreateInput!): Album!
  updateAlbum(data: AlbumUpdateInput!, where: AlbumWhereUniqueInput!): Album
  updateManyAlbums(data: AlbumUpdateManyMutationInput!, where: AlbumWhereInput): BatchPayload!
  upsertAlbum(where: AlbumWhereUniqueInput!, create: AlbumCreateInput!, update: AlbumUpdateInput!): Album!
  deleteAlbum(where: AlbumWhereUniqueInput!): Album
  deleteManyAlbums(where: AlbumWhereInput): BatchPayload!
  createArtist(data: ArtistCreateInput!): Artist!
  updateArtist(data: ArtistUpdateInput!, where: ArtistWhereUniqueInput!): Artist
  updateManyArtists(data: ArtistUpdateManyMutationInput!, where: ArtistWhereInput): BatchPayload!
  upsertArtist(where: ArtistWhereUniqueInput!, create: ArtistCreateInput!, update: ArtistUpdateInput!): Artist!
  deleteArtist(where: ArtistWhereUniqueInput!): Artist
  deleteManyArtists(where: ArtistWhereInput): BatchPayload!
  createAudio(data: AudioCreateInput!): Audio!
  updateAudio(data: AudioUpdateInput!, where: AudioWhereUniqueInput!): Audio
  updateManyAudios(data: AudioUpdateManyMutationInput!, where: AudioWhereInput): BatchPayload!
  upsertAudio(where: AudioWhereUniqueInput!, create: AudioCreateInput!, update: AudioUpdateInput!): Audio!
  deleteAudio(where: AudioWhereUniqueInput!): Audio
  deleteManyAudios(where: AudioWhereInput): BatchPayload!
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  createPlaylist(data: PlaylistCreateInput!): Playlist!
  updatePlaylist(data: PlaylistUpdateInput!, where: PlaylistWhereUniqueInput!): Playlist
  updateManyPlaylists(data: PlaylistUpdateManyMutationInput!, where: PlaylistWhereInput): BatchPayload!
  upsertPlaylist(where: PlaylistWhereUniqueInput!, create: PlaylistCreateInput!, update: PlaylistUpdateInput!): Playlist!
  deletePlaylist(where: PlaylistWhereUniqueInput!): Playlist
  deleteManyPlaylists(where: PlaylistWhereInput): BatchPayload!
  createPlaylistTrack(data: PlaylistTrackCreateInput!): PlaylistTrack!
  updatePlaylistTrack(data: PlaylistTrackUpdateInput!, where: PlaylistTrackWhereUniqueInput!): PlaylistTrack
  updateManyPlaylistTracks(data: PlaylistTrackUpdateManyMutationInput!, where: PlaylistTrackWhereInput): BatchPayload!
  upsertPlaylistTrack(where: PlaylistTrackWhereUniqueInput!, create: PlaylistTrackCreateInput!, update: PlaylistTrackUpdateInput!): PlaylistTrack!
  deletePlaylistTrack(where: PlaylistTrackWhereUniqueInput!): PlaylistTrack
  deleteManyPlaylistTracks(where: PlaylistTrackWhereInput): BatchPayload!
  createTrack(data: TrackCreateInput!): Track!
  updateTrack(data: TrackUpdateInput!, where: TrackWhereUniqueInput!): Track
  updateManyTracks(data: TrackUpdateManyMutationInput!, where: TrackWhereInput): BatchPayload!
  upsertTrack(where: TrackWhereUniqueInput!, create: TrackCreateInput!, update: TrackUpdateInput!): Track!
  deleteTrack(where: TrackWhereUniqueInput!): Track
  deleteManyTracks(where: TrackWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Playlist {
  id: ID!
  alias: String!
  artwork(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  collaborative: Boolean!
  creator: User!
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy!
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track!]
  collaborativeTracks(where: PlaylistTrackWhereInput, orderBy: PlaylistTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaylistTrack!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PlaylistConnection {
  pageInfo: PageInfo!
  edges: [PlaylistEdge]!
  aggregate: AggregatePlaylist!
}

input PlaylistCreateInput {
  id: ID
  alias: String!
  artwork: ImageCreateManyInput
  collaborative: Boolean
  creator: UserCreateOneWithoutPlaylistsInput!
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy
  tracks: TrackCreateManyWithoutPlaylistsInput
  collaborativeTracks: PlaylistTrackCreateManyWithoutPlaylistsInput
}

input PlaylistCreateManyWithoutCollaborativeTracksInput {
  create: [PlaylistCreateWithoutCollaborativeTracksInput!]
  connect: [PlaylistWhereUniqueInput!]
}

input PlaylistCreateManyWithoutCreatorInput {
  create: [PlaylistCreateWithoutCreatorInput!]
  connect: [PlaylistWhereUniqueInput!]
}

input PlaylistCreateManyWithoutTracksInput {
  create: [PlaylistCreateWithoutTracksInput!]
  connect: [PlaylistWhereUniqueInput!]
}

input PlaylistCreateWithoutCollaborativeTracksInput {
  id: ID
  alias: String!
  artwork: ImageCreateManyInput
  collaborative: Boolean
  creator: UserCreateOneWithoutPlaylistsInput!
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy
  tracks: TrackCreateManyWithoutPlaylistsInput
}

input PlaylistCreateWithoutCreatorInput {
  id: ID
  alias: String!
  artwork: ImageCreateManyInput
  collaborative: Boolean
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy
  tracks: TrackCreateManyWithoutPlaylistsInput
  collaborativeTracks: PlaylistTrackCreateManyWithoutPlaylistsInput
}

input PlaylistCreateWithoutTracksInput {
  id: ID
  alias: String!
  artwork: ImageCreateManyInput
  collaborative: Boolean
  creator: UserCreateOneWithoutPlaylistsInput!
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy
  collaborativeTracks: PlaylistTrackCreateManyWithoutPlaylistsInput
}

type PlaylistEdge {
  node: Playlist!
  cursor: String!
}

enum PlaylistOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  collaborative_ASC
  collaborative_DESC
  description_ASC
  description_DESC
  duration_ASC
  duration_DESC
  name_ASC
  name_DESC
  numTracks_ASC
  numTracks_DESC
  privacy_ASC
  privacy_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlaylistPreviousValues {
  id: ID!
  alias: String!
  collaborative: Boolean!
  description: String
  duration: Int!
  name: String!
  numTracks: Int!
  privacy: Privacy!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PlaylistScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  collaborative: Boolean
  collaborative_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  numTracks: Int
  numTracks_not: Int
  numTracks_in: [Int!]
  numTracks_not_in: [Int!]
  numTracks_lt: Int
  numTracks_lte: Int
  numTracks_gt: Int
  numTracks_gte: Int
  privacy: Privacy
  privacy_not: Privacy
  privacy_in: [Privacy!]
  privacy_not_in: [Privacy!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PlaylistScalarWhereInput!]
  OR: [PlaylistScalarWhereInput!]
  NOT: [PlaylistScalarWhereInput!]
}

type PlaylistSubscriptionPayload {
  mutation: MutationType!
  node: Playlist
  updatedFields: [String!]
  previousValues: PlaylistPreviousValues
}

input PlaylistSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaylistWhereInput
  AND: [PlaylistSubscriptionWhereInput!]
  OR: [PlaylistSubscriptionWhereInput!]
  NOT: [PlaylistSubscriptionWhereInput!]
}

type PlaylistTrack {
  id: ID!
  addedAt: DateTime!
  addedBy: User!
  playlists(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playlist!]
  track: Track!
}

type PlaylistTrackConnection {
  pageInfo: PageInfo!
  edges: [PlaylistTrackEdge]!
  aggregate: AggregatePlaylistTrack!
}

input PlaylistTrackCreateInput {
  id: ID
  addedAt: DateTime!
  addedBy: UserCreateOneInput!
  playlists: PlaylistCreateManyWithoutCollaborativeTracksInput
  track: TrackCreateOneInput!
}

input PlaylistTrackCreateManyWithoutPlaylistsInput {
  create: [PlaylistTrackCreateWithoutPlaylistsInput!]
  connect: [PlaylistTrackWhereUniqueInput!]
}

input PlaylistTrackCreateWithoutPlaylistsInput {
  id: ID
  addedAt: DateTime!
  addedBy: UserCreateOneInput!
  track: TrackCreateOneInput!
}

type PlaylistTrackEdge {
  node: PlaylistTrack!
  cursor: String!
}

enum PlaylistTrackOrderByInput {
  id_ASC
  id_DESC
  addedAt_ASC
  addedAt_DESC
}

type PlaylistTrackPreviousValues {
  id: ID!
  addedAt: DateTime!
}

input PlaylistTrackScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  addedAt: DateTime
  addedAt_not: DateTime
  addedAt_in: [DateTime!]
  addedAt_not_in: [DateTime!]
  addedAt_lt: DateTime
  addedAt_lte: DateTime
  addedAt_gt: DateTime
  addedAt_gte: DateTime
  AND: [PlaylistTrackScalarWhereInput!]
  OR: [PlaylistTrackScalarWhereInput!]
  NOT: [PlaylistTrackScalarWhereInput!]
}

type PlaylistTrackSubscriptionPayload {
  mutation: MutationType!
  node: PlaylistTrack
  updatedFields: [String!]
  previousValues: PlaylistTrackPreviousValues
}

input PlaylistTrackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaylistTrackWhereInput
  AND: [PlaylistTrackSubscriptionWhereInput!]
  OR: [PlaylistTrackSubscriptionWhereInput!]
  NOT: [PlaylistTrackSubscriptionWhereInput!]
}

input PlaylistTrackUpdateInput {
  addedAt: DateTime
  addedBy: UserUpdateOneRequiredInput
  playlists: PlaylistUpdateManyWithoutCollaborativeTracksInput
  track: TrackUpdateOneRequiredInput
}

input PlaylistTrackUpdateManyDataInput {
  addedAt: DateTime
}

input PlaylistTrackUpdateManyMutationInput {
  addedAt: DateTime
}

input PlaylistTrackUpdateManyWithoutPlaylistsInput {
  create: [PlaylistTrackCreateWithoutPlaylistsInput!]
  delete: [PlaylistTrackWhereUniqueInput!]
  connect: [PlaylistTrackWhereUniqueInput!]
  set: [PlaylistTrackWhereUniqueInput!]
  disconnect: [PlaylistTrackWhereUniqueInput!]
  update: [PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistsInput!]
  upsert: [PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistsInput!]
  deleteMany: [PlaylistTrackScalarWhereInput!]
  updateMany: [PlaylistTrackUpdateManyWithWhereNestedInput!]
}

input PlaylistTrackUpdateManyWithWhereNestedInput {
  where: PlaylistTrackScalarWhereInput!
  data: PlaylistTrackUpdateManyDataInput!
}

input PlaylistTrackUpdateWithoutPlaylistsDataInput {
  addedAt: DateTime
  addedBy: UserUpdateOneRequiredInput
  track: TrackUpdateOneRequiredInput
}

input PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistsInput {
  where: PlaylistTrackWhereUniqueInput!
  data: PlaylistTrackUpdateWithoutPlaylistsDataInput!
}

input PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistsInput {
  where: PlaylistTrackWhereUniqueInput!
  update: PlaylistTrackUpdateWithoutPlaylistsDataInput!
  create: PlaylistTrackCreateWithoutPlaylistsInput!
}

input PlaylistTrackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  addedAt: DateTime
  addedAt_not: DateTime
  addedAt_in: [DateTime!]
  addedAt_not_in: [DateTime!]
  addedAt_lt: DateTime
  addedAt_lte: DateTime
  addedAt_gt: DateTime
  addedAt_gte: DateTime
  addedBy: UserWhereInput
  playlists_every: PlaylistWhereInput
  playlists_some: PlaylistWhereInput
  playlists_none: PlaylistWhereInput
  track: TrackWhereInput
  AND: [PlaylistTrackWhereInput!]
  OR: [PlaylistTrackWhereInput!]
  NOT: [PlaylistTrackWhereInput!]
}

input PlaylistTrackWhereUniqueInput {
  id: ID
}

input PlaylistUpdateInput {
  alias: String
  artwork: ImageUpdateManyInput
  collaborative: Boolean
  creator: UserUpdateOneRequiredWithoutPlaylistsInput
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
  tracks: TrackUpdateManyWithoutPlaylistsInput
  collaborativeTracks: PlaylistTrackUpdateManyWithoutPlaylistsInput
}

input PlaylistUpdateManyDataInput {
  alias: String
  collaborative: Boolean
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
}

input PlaylistUpdateManyMutationInput {
  alias: String
  collaborative: Boolean
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
}

input PlaylistUpdateManyWithoutCollaborativeTracksInput {
  create: [PlaylistCreateWithoutCollaborativeTracksInput!]
  delete: [PlaylistWhereUniqueInput!]
  connect: [PlaylistWhereUniqueInput!]
  set: [PlaylistWhereUniqueInput!]
  disconnect: [PlaylistWhereUniqueInput!]
  update: [PlaylistUpdateWithWhereUniqueWithoutCollaborativeTracksInput!]
  upsert: [PlaylistUpsertWithWhereUniqueWithoutCollaborativeTracksInput!]
  deleteMany: [PlaylistScalarWhereInput!]
  updateMany: [PlaylistUpdateManyWithWhereNestedInput!]
}

input PlaylistUpdateManyWithoutCreatorInput {
  create: [PlaylistCreateWithoutCreatorInput!]
  delete: [PlaylistWhereUniqueInput!]
  connect: [PlaylistWhereUniqueInput!]
  set: [PlaylistWhereUniqueInput!]
  disconnect: [PlaylistWhereUniqueInput!]
  update: [PlaylistUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [PlaylistUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [PlaylistScalarWhereInput!]
  updateMany: [PlaylistUpdateManyWithWhereNestedInput!]
}

input PlaylistUpdateManyWithoutTracksInput {
  create: [PlaylistCreateWithoutTracksInput!]
  delete: [PlaylistWhereUniqueInput!]
  connect: [PlaylistWhereUniqueInput!]
  set: [PlaylistWhereUniqueInput!]
  disconnect: [PlaylistWhereUniqueInput!]
  update: [PlaylistUpdateWithWhereUniqueWithoutTracksInput!]
  upsert: [PlaylistUpsertWithWhereUniqueWithoutTracksInput!]
  deleteMany: [PlaylistScalarWhereInput!]
  updateMany: [PlaylistUpdateManyWithWhereNestedInput!]
}

input PlaylistUpdateManyWithWhereNestedInput {
  where: PlaylistScalarWhereInput!
  data: PlaylistUpdateManyDataInput!
}

input PlaylistUpdateWithoutCollaborativeTracksDataInput {
  alias: String
  artwork: ImageUpdateManyInput
  collaborative: Boolean
  creator: UserUpdateOneRequiredWithoutPlaylistsInput
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
  tracks: TrackUpdateManyWithoutPlaylistsInput
}

input PlaylistUpdateWithoutCreatorDataInput {
  alias: String
  artwork: ImageUpdateManyInput
  collaborative: Boolean
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
  tracks: TrackUpdateManyWithoutPlaylistsInput
  collaborativeTracks: PlaylistTrackUpdateManyWithoutPlaylistsInput
}

input PlaylistUpdateWithoutTracksDataInput {
  alias: String
  artwork: ImageUpdateManyInput
  collaborative: Boolean
  creator: UserUpdateOneRequiredWithoutPlaylistsInput
  description: String
  duration: Int
  name: String
  numTracks: Int
  privacy: Privacy
  collaborativeTracks: PlaylistTrackUpdateManyWithoutPlaylistsInput
}

input PlaylistUpdateWithWhereUniqueWithoutCollaborativeTracksInput {
  where: PlaylistWhereUniqueInput!
  data: PlaylistUpdateWithoutCollaborativeTracksDataInput!
}

input PlaylistUpdateWithWhereUniqueWithoutCreatorInput {
  where: PlaylistWhereUniqueInput!
  data: PlaylistUpdateWithoutCreatorDataInput!
}

input PlaylistUpdateWithWhereUniqueWithoutTracksInput {
  where: PlaylistWhereUniqueInput!
  data: PlaylistUpdateWithoutTracksDataInput!
}

input PlaylistUpsertWithWhereUniqueWithoutCollaborativeTracksInput {
  where: PlaylistWhereUniqueInput!
  update: PlaylistUpdateWithoutCollaborativeTracksDataInput!
  create: PlaylistCreateWithoutCollaborativeTracksInput!
}

input PlaylistUpsertWithWhereUniqueWithoutCreatorInput {
  where: PlaylistWhereUniqueInput!
  update: PlaylistUpdateWithoutCreatorDataInput!
  create: PlaylistCreateWithoutCreatorInput!
}

input PlaylistUpsertWithWhereUniqueWithoutTracksInput {
  where: PlaylistWhereUniqueInput!
  update: PlaylistUpdateWithoutTracksDataInput!
  create: PlaylistCreateWithoutTracksInput!
}

input PlaylistWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  artwork_every: ImageWhereInput
  artwork_some: ImageWhereInput
  artwork_none: ImageWhereInput
  collaborative: Boolean
  collaborative_not: Boolean
  creator: UserWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  numTracks: Int
  numTracks_not: Int
  numTracks_in: [Int!]
  numTracks_not_in: [Int!]
  numTracks_lt: Int
  numTracks_lte: Int
  numTracks_gt: Int
  numTracks_gte: Int
  privacy: Privacy
  privacy_not: Privacy
  privacy_in: [Privacy!]
  privacy_not_in: [Privacy!]
  tracks_every: TrackWhereInput
  tracks_some: TrackWhereInput
  tracks_none: TrackWhereInput
  collaborativeTracks_every: PlaylistTrackWhereInput
  collaborativeTracks_some: PlaylistTrackWhereInput
  collaborativeTracks_none: PlaylistTrackWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PlaylistWhereInput!]
  OR: [PlaylistWhereInput!]
  NOT: [PlaylistWhereInput!]
}

input PlaylistWhereUniqueInput {
  id: ID
  alias: String
}

enum Privacy {
  PRIVATE
  PUBLIC
  UNLISTED
}

type Query {
  album(where: AlbumWhereUniqueInput!): Album
  albums(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album]!
  albumsConnection(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlbumConnection!
  artist(where: ArtistWhereUniqueInput!): Artist
  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist]!
  artistsConnection(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArtistConnection!
  audio(where: AudioWhereUniqueInput!): Audio
  audios(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audio]!
  audiosConnection(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AudioConnection!
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  playlist(where: PlaylistWhereUniqueInput!): Playlist
  playlists(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playlist]!
  playlistsConnection(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaylistConnection!
  playlistTrack(where: PlaylistTrackWhereUniqueInput!): PlaylistTrack
  playlistTracks(where: PlaylistTrackWhereInput, orderBy: PlaylistTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaylistTrack]!
  playlistTracksConnection(where: PlaylistTrackWhereInput, orderBy: PlaylistTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaylistTrackConnection!
  track(where: TrackWhereUniqueInput!): Track
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track]!
  tracksConnection(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrackConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum ReleaseType {
  ALBUM
  EP
  LP
  PODCAST
  SINGLE
}

type Subscription {
  album(where: AlbumSubscriptionWhereInput): AlbumSubscriptionPayload
  artist(where: ArtistSubscriptionWhereInput): ArtistSubscriptionPayload
  audio(where: AudioSubscriptionWhereInput): AudioSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  playlist(where: PlaylistSubscriptionWhereInput): PlaylistSubscriptionPayload
  playlistTrack(where: PlaylistTrackSubscriptionWhereInput): PlaylistTrackSubscriptionPayload
  track(where: TrackSubscriptionWhereInput): TrackSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Track {
  id: ID!
  album: Album!
  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]
  audio: Audio
  discNumber: Int
  duration: Int
  explicit: Boolean!
  featuring(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist!]
  genre: String!
  playlists(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playlist!]
  isPlayable: Boolean!
  name: String!
  trackNumber: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TrackConnection {
  pageInfo: PageInfo!
  edges: [TrackEdge]!
  aggregate: AggregateTrack!
}

input TrackCreateInput {
  id: ID
  album: AlbumCreateOneWithoutTracksInput!
  artists: ArtistCreateManyWithoutTracksInput
  audio: AudioCreateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistCreateManyWithoutFeaturesInInput
  genre: String
  playlists: PlaylistCreateManyWithoutTracksInput
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
}

input TrackCreateManyWithoutAlbumInput {
  create: [TrackCreateWithoutAlbumInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateManyWithoutArtistsInput {
  create: [TrackCreateWithoutArtistsInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateManyWithoutFeaturingInput {
  create: [TrackCreateWithoutFeaturingInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateManyWithoutPlaylistsInput {
  create: [TrackCreateWithoutPlaylistsInput!]
  connect: [TrackWhereUniqueInput!]
}

input TrackCreateOneInput {
  create: TrackCreateInput
  connect: TrackWhereUniqueInput
}

input TrackCreateWithoutAlbumInput {
  id: ID
  artists: ArtistCreateManyWithoutTracksInput
  audio: AudioCreateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistCreateManyWithoutFeaturesInInput
  genre: String
  playlists: PlaylistCreateManyWithoutTracksInput
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
}

input TrackCreateWithoutArtistsInput {
  id: ID
  album: AlbumCreateOneWithoutTracksInput!
  audio: AudioCreateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistCreateManyWithoutFeaturesInInput
  genre: String
  playlists: PlaylistCreateManyWithoutTracksInput
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
}

input TrackCreateWithoutFeaturingInput {
  id: ID
  album: AlbumCreateOneWithoutTracksInput!
  artists: ArtistCreateManyWithoutTracksInput
  audio: AudioCreateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  playlists: PlaylistCreateManyWithoutTracksInput
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
}

input TrackCreateWithoutPlaylistsInput {
  id: ID
  album: AlbumCreateOneWithoutTracksInput!
  artists: ArtistCreateManyWithoutTracksInput
  audio: AudioCreateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistCreateManyWithoutFeaturesInInput
  genre: String
  isPlayable: Boolean
  name: String!
  trackNumber: Int!
}

type TrackEdge {
  node: Track!
  cursor: String!
}

enum TrackOrderByInput {
  id_ASC
  id_DESC
  discNumber_ASC
  discNumber_DESC
  duration_ASC
  duration_DESC
  explicit_ASC
  explicit_DESC
  genre_ASC
  genre_DESC
  isPlayable_ASC
  isPlayable_DESC
  name_ASC
  name_DESC
  trackNumber_ASC
  trackNumber_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TrackPreviousValues {
  id: ID!
  discNumber: Int
  duration: Int
  explicit: Boolean!
  genre: String!
  isPlayable: Boolean!
  name: String!
  trackNumber: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TrackScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  discNumber: Int
  discNumber_not: Int
  discNumber_in: [Int!]
  discNumber_not_in: [Int!]
  discNumber_lt: Int
  discNumber_lte: Int
  discNumber_gt: Int
  discNumber_gte: Int
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  explicit: Boolean
  explicit_not: Boolean
  genre: String
  genre_not: String
  genre_in: [String!]
  genre_not_in: [String!]
  genre_lt: String
  genre_lte: String
  genre_gt: String
  genre_gte: String
  genre_contains: String
  genre_not_contains: String
  genre_starts_with: String
  genre_not_starts_with: String
  genre_ends_with: String
  genre_not_ends_with: String
  isPlayable: Boolean
  isPlayable_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  trackNumber: Int
  trackNumber_not: Int
  trackNumber_in: [Int!]
  trackNumber_not_in: [Int!]
  trackNumber_lt: Int
  trackNumber_lte: Int
  trackNumber_gt: Int
  trackNumber_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TrackScalarWhereInput!]
  OR: [TrackScalarWhereInput!]
  NOT: [TrackScalarWhereInput!]
}

type TrackSubscriptionPayload {
  mutation: MutationType!
  node: Track
  updatedFields: [String!]
  previousValues: TrackPreviousValues
}

input TrackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TrackWhereInput
  AND: [TrackSubscriptionWhereInput!]
  OR: [TrackSubscriptionWhereInput!]
  NOT: [TrackSubscriptionWhereInput!]
}

input TrackUpdateDataInput {
  album: AlbumUpdateOneRequiredWithoutTracksInput
  artists: ArtistUpdateManyWithoutTracksInput
  audio: AudioUpdateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistUpdateManyWithoutFeaturesInInput
  genre: String
  playlists: PlaylistUpdateManyWithoutTracksInput
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateInput {
  album: AlbumUpdateOneRequiredWithoutTracksInput
  artists: ArtistUpdateManyWithoutTracksInput
  audio: AudioUpdateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistUpdateManyWithoutFeaturesInInput
  genre: String
  playlists: PlaylistUpdateManyWithoutTracksInput
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateManyDataInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateManyMutationInput {
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateManyWithoutAlbumInput {
  create: [TrackCreateWithoutAlbumInput!]
  delete: [TrackWhereUniqueInput!]
  connect: [TrackWhereUniqueInput!]
  set: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutAlbumInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutAlbumInput!]
  deleteMany: [TrackScalarWhereInput!]
  updateMany: [TrackUpdateManyWithWhereNestedInput!]
}

input TrackUpdateManyWithoutArtistsInput {
  create: [TrackCreateWithoutArtistsInput!]
  delete: [TrackWhereUniqueInput!]
  connect: [TrackWhereUniqueInput!]
  set: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutArtistsInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutArtistsInput!]
  deleteMany: [TrackScalarWhereInput!]
  updateMany: [TrackUpdateManyWithWhereNestedInput!]
}

input TrackUpdateManyWithoutFeaturingInput {
  create: [TrackCreateWithoutFeaturingInput!]
  delete: [TrackWhereUniqueInput!]
  connect: [TrackWhereUniqueInput!]
  set: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutFeaturingInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutFeaturingInput!]
  deleteMany: [TrackScalarWhereInput!]
  updateMany: [TrackUpdateManyWithWhereNestedInput!]
}

input TrackUpdateManyWithoutPlaylistsInput {
  create: [TrackCreateWithoutPlaylistsInput!]
  delete: [TrackWhereUniqueInput!]
  connect: [TrackWhereUniqueInput!]
  set: [TrackWhereUniqueInput!]
  disconnect: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutPlaylistsInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutPlaylistsInput!]
  deleteMany: [TrackScalarWhereInput!]
  updateMany: [TrackUpdateManyWithWhereNestedInput!]
}

input TrackUpdateManyWithWhereNestedInput {
  where: TrackScalarWhereInput!
  data: TrackUpdateManyDataInput!
}

input TrackUpdateOneRequiredInput {
  create: TrackCreateInput
  update: TrackUpdateDataInput
  upsert: TrackUpsertNestedInput
  connect: TrackWhereUniqueInput
}

input TrackUpdateWithoutAlbumDataInput {
  artists: ArtistUpdateManyWithoutTracksInput
  audio: AudioUpdateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistUpdateManyWithoutFeaturesInInput
  genre: String
  playlists: PlaylistUpdateManyWithoutTracksInput
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateWithoutArtistsDataInput {
  album: AlbumUpdateOneRequiredWithoutTracksInput
  audio: AudioUpdateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistUpdateManyWithoutFeaturesInInput
  genre: String
  playlists: PlaylistUpdateManyWithoutTracksInput
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateWithoutFeaturingDataInput {
  album: AlbumUpdateOneRequiredWithoutTracksInput
  artists: ArtistUpdateManyWithoutTracksInput
  audio: AudioUpdateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  genre: String
  playlists: PlaylistUpdateManyWithoutTracksInput
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateWithoutPlaylistsDataInput {
  album: AlbumUpdateOneRequiredWithoutTracksInput
  artists: ArtistUpdateManyWithoutTracksInput
  audio: AudioUpdateOneInput
  discNumber: Int
  duration: Int
  explicit: Boolean
  featuring: ArtistUpdateManyWithoutFeaturesInInput
  genre: String
  isPlayable: Boolean
  name: String
  trackNumber: Int
}

input TrackUpdateWithWhereUniqueWithoutAlbumInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutAlbumDataInput!
}

input TrackUpdateWithWhereUniqueWithoutArtistsInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutArtistsDataInput!
}

input TrackUpdateWithWhereUniqueWithoutFeaturingInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutFeaturingDataInput!
}

input TrackUpdateWithWhereUniqueWithoutPlaylistsInput {
  where: TrackWhereUniqueInput!
  data: TrackUpdateWithoutPlaylistsDataInput!
}

input TrackUpsertNestedInput {
  update: TrackUpdateDataInput!
  create: TrackCreateInput!
}

input TrackUpsertWithWhereUniqueWithoutAlbumInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutAlbumDataInput!
  create: TrackCreateWithoutAlbumInput!
}

input TrackUpsertWithWhereUniqueWithoutArtistsInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutArtistsDataInput!
  create: TrackCreateWithoutArtistsInput!
}

input TrackUpsertWithWhereUniqueWithoutFeaturingInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutFeaturingDataInput!
  create: TrackCreateWithoutFeaturingInput!
}

input TrackUpsertWithWhereUniqueWithoutPlaylistsInput {
  where: TrackWhereUniqueInput!
  update: TrackUpdateWithoutPlaylistsDataInput!
  create: TrackCreateWithoutPlaylistsInput!
}

input TrackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  album: AlbumWhereInput
  artists_every: ArtistWhereInput
  artists_some: ArtistWhereInput
  artists_none: ArtistWhereInput
  audio: AudioWhereInput
  discNumber: Int
  discNumber_not: Int
  discNumber_in: [Int!]
  discNumber_not_in: [Int!]
  discNumber_lt: Int
  discNumber_lte: Int
  discNumber_gt: Int
  discNumber_gte: Int
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  explicit: Boolean
  explicit_not: Boolean
  featuring_every: ArtistWhereInput
  featuring_some: ArtistWhereInput
  featuring_none: ArtistWhereInput
  genre: String
  genre_not: String
  genre_in: [String!]
  genre_not_in: [String!]
  genre_lt: String
  genre_lte: String
  genre_gt: String
  genre_gte: String
  genre_contains: String
  genre_not_contains: String
  genre_starts_with: String
  genre_not_starts_with: String
  genre_ends_with: String
  genre_not_ends_with: String
  playlists_every: PlaylistWhereInput
  playlists_some: PlaylistWhereInput
  playlists_none: PlaylistWhereInput
  isPlayable: Boolean
  isPlayable_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  trackNumber: Int
  trackNumber_not: Int
  trackNumber_in: [Int!]
  trackNumber_not_in: [Int!]
  trackNumber_lt: Int
  trackNumber_lte: Int
  trackNumber_gt: Int
  trackNumber_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TrackWhereInput!]
  OR: [TrackWhereInput!]
  NOT: [TrackWhereInput!]
}

input TrackWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  isAdmin: Boolean!
  email: String!
  name: String
  password: String!
  playlists(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playlist!]
  username: String
  verified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  isAdmin: Boolean
  email: String!
  name: String
  password: String!
  playlists: PlaylistCreateManyWithoutCreatorInput
  username: String
  verified: Boolean
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlaylistsInput {
  create: UserCreateWithoutPlaylistsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlaylistsInput {
  id: ID
  isAdmin: Boolean
  email: String!
  name: String
  password: String!
  username: String
  verified: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  isAdmin_ASC
  isAdmin_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  username_ASC
  username_DESC
  verified_ASC
  verified_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  isAdmin: Boolean!
  email: String!
  name: String
  password: String!
  username: String
  verified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  isAdmin: Boolean
  email: String
  name: String
  password: String
  playlists: PlaylistUpdateManyWithoutCreatorInput
  username: String
  verified: Boolean
}

input UserUpdateInput {
  isAdmin: Boolean
  email: String
  name: String
  password: String
  playlists: PlaylistUpdateManyWithoutCreatorInput
  username: String
  verified: Boolean
}

input UserUpdateManyMutationInput {
  isAdmin: Boolean
  email: String
  name: String
  password: String
  username: String
  verified: Boolean
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPlaylistsInput {
  create: UserCreateWithoutPlaylistsInput
  update: UserUpdateWithoutPlaylistsDataInput
  upsert: UserUpsertWithoutPlaylistsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPlaylistsDataInput {
  isAdmin: Boolean
  email: String
  name: String
  password: String
  username: String
  verified: Boolean
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPlaylistsInput {
  update: UserUpdateWithoutPlaylistsDataInput!
  create: UserCreateWithoutPlaylistsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isAdmin: Boolean
  isAdmin_not: Boolean
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  playlists_every: PlaylistWhereInput
  playlists_some: PlaylistWhereInput
  playlists_none: PlaylistWhereInput
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  verified: Boolean
  verified_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
